generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int               @id @default(autoincrement())
  username     String            @unique
  email        String?           @unique
  coins        Int               @default(1000)
  image        String?
  transactions CoinTransaction[]
  gamesWon     Game[]            @relation("GameWinner")
  players      Player[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

model Room {
  id       Int      @id @default(autoincrement())
  code     String   @unique
  isActive Boolean  @default(true)
  game     Game?
  players  Player[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("rooms")
}

model Game {
  id           Int               @id @default(autoincrement())
  startedAt    DateTime          @default(now())
  endedAt      DateTime?
  entryFee     Int               @default(0)
  reward       Int               @default(0)
  roomId       Int               @unique
  winnerId     Int?
  transactions CoinTransaction[]
  room         Room              @relation(fields: [roomId], references: [id])
  winner       User?             @relation("GameWinner", fields: [winnerId], references: [id])
  players      Player[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("games")
}

model Player {
  id       Int      @id @default(autoincrement())
  joinedAt DateTime @default(now())
  isHost   Boolean  @default(false)
  isReady  Boolean  @default(true)
  userId   Int
  roomId   Int
  gameId   Int?
  game     Game?    @relation(fields: [gameId], references: [id])
  room     Room     @relation(fields: [roomId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("players")
}

model CoinTransaction {
  id     Int             @id @default(autoincrement())
  amount Int
  type   TransactionType
  notes  String?
  userId Int
  gameId Int?
  game   Game?           @relation(fields: [gameId], references: [id])
  user   User            @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("coin_transactions")
}

enum TransactionType {
  EARN
  SPEND
  ENTRY_FEE
  REWARD
}
